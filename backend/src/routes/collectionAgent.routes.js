// src/routes/collectionAgent.routes.js
const express = require("express");
const router = express.Router();
// Adjust relative paths based on your actual file structure if needed
const collectionAgentController = require("../../src/controllers/collectionAgent.controller");
const authMiddleware = require("../../src/middleware/authMiddleware");  
const upload = require("../../src/config/multer.config"); // Uses the simplified config now
const multer = require("multer"); // Import multer itself for error checking

// --- Sign-up Route ---
router.post(
  "/signup",

  // 1. Middleware to log incoming request headers
  (req, res, next) => {
    console.log("\n--- [Route /signup] Incoming Request ---"); // Add newline for clarity
    console.log("Timestamp:", new Date().toISOString());
    console.log("Headers Received:");
    // Log the crucial Content-Type header
    console.log("  Content-Type:", req.headers["content-type"]);
    // Log Content-Length if present (can indicate if data is being sent)
    console.log("  Content-Length:", req.headers["content-length"]);
    // console.log("All Headers:", req.headers); // Uncomment for very verbose logging if needed
    next(); // Pass control to the next middleware in the chain
  },

  // 2. Multer Middleware with explicit error handling
  (req, res, next) => {
    console.log("[Route /signup] Entering Multer middleware wrapper.");
    // Get the configured uploader instance (currently simplified)
    const uploader = upload.single("certificateFile"); // Field name MUST match frontend FormData key

    // Execute the uploader middleware
    uploader(req, res, function (err) {
      console.log(
        "[Route /signup] Multer uploader function callback executed."
      );
      // Check specifically for errors generated by Multer itself
      if (err instanceof multer.MulterError) {
        console.error(
          "[Route /signup] MULTER ERROR DETECTED:",
          err.code,
          err.message
        );
        // Examples: LIMIT_FILE_SIZE, LIMIT_UNEXPECTED_FILE, etc.
        return res.status(400).json({
          message: `File upload error: ${err.message} (Code: ${err.code})`,
        });
      } else if (err) {
        // Check for other errors (e.g., from fileFilter if enabled, or storage engine)
        console.error(
          "[Route /signup] UNKNOWN UPLOAD ERROR DETECTED:",
          err.message
        );
        // Treat filter/storage errors as Bad Request as well
        return res.status(400).json({
          message: `File upload failed: ${err.message}`,
        });
      }
      // If no errors occurred during Multer processing
      console.log("[Route /signup] Multer middleware finished without errors.");
      // Log whether Multer successfully populated req.file
      console.log("  req.file populated by Multer:", !!req.file); // Use !! to force boolean
      if (req.file) {
        console.log("  req.file details:", req.file); // Log file details if it exists
      }
      // Proceed to the next middleware/controller in the chain
      next();
    });
  },

  // 3. Controller Function (runs only if Multer middleware calls next())
  collectionAgentController.signUp
);

// --- Sign-in Route ---
router.post("/signin", collectionAgentController.signIn);

// --- Protected Route Example ---
router.get(
  "/protected",
  authMiddleware.authenticate, // First, verify JWT token
  authMiddleware.authorize(["collectionAgent"]), // Then, check if role is 'collectionAgent'
  collectionAgentController.collectionAgentProtected // Finally, run the controller logic
);

module.exports = router;
